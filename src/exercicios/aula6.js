/*
ðŸ§ª ExercÃ­cio 1 â€“ Criando uma Promise simples
Crie uma funÃ§Ã£o chamada carregarDados() que retorna uma Promise.
Ela deve simular um carregamento de dados com setTimeout e, apÃ³s 2 segundos, retornar a string "Dados carregados com sucesso!".
*/

const carregarDados = () => new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Dados carregados com sucesso")
    }, 2000)
})

// carregarDados.then((resultado) => {
//     console.log(resultado)
// })

/*
ðŸ§ª ExercÃ­cio 2 â€“ Tratando erro em Promises
Crie uma funÃ§Ã£o buscarUsuario(id) que:
Retorna uma Promise;
Se o id for maior que 0, resolve com o nome "UsuÃ¡rio vÃ¡lido";
Caso contrÃ¡rio, rejeita com a mensagem "ID invÃ¡lido".
Use o .then() e .catch() para testar a funÃ§Ã£o com um valor vÃ¡lido e outro invÃ¡lido.
*/

const buscarUsuario = (id) => {
    return new Promise((resolve, reject) => {
        if (id > 0) {
            resolve(` ${id} vÃ¡lida`)
        }
        else {
            reject(` ${id} invÃ¡lida`)
        }
    })
}

const ids = [0, 2, 3, 5, 6, -3, -2, -1]
buscarUsuario(2).then((resultado) => console.log(resultado)).catch((erro) => console.log(erro))


for (let id of ids) {
    buscarUsuario(id).then((resultado) => console.log(resultado)).catch((erro) => console.log(erro))
}





/*
ðŸ§ª ExercÃ­cio 3 â€“ Usando async/await
Utilize async/await para reescrever a chamada Ã  funÃ§Ã£o carregarDados() do ExercÃ­cio 1.
Inclua o try/catch para tratar erros, mesmo que a funÃ§Ã£o original nÃ£o os gere.
*/

const carregarDados2 = () => new Promise((resolve, reject) => {

    setTimeout(() => {
        resolve("Dados carregados com sucesso")
    }, 2000)
})
// FunÃ§Ã£o async na assinatura
async function exercicio3() {
    try {
        const resultado = await carregarDados2();
        console.log(resultado)
    } catch (error) {
        console.error(error)
    }
}

// exercicio3();

/*
ðŸ§ª ExercÃ­cio 4 â€“ Encadeando Promises
Crie uma sequÃªncia de Promises que simule o processo de:
Fazer login (login()),
Buscar dados do usuÃ¡rio (buscarDadosUsuario()),
Exibir mensagem de boas-vindas com o nome do usuÃ¡rio (mostrarBoasVindas()).
Cada funÃ§Ã£o deve retornar uma Promise resolvida com um valor fictÃ­cio (por exemplo, o nome do usuÃ¡rio).
*/





const login = (login) => new Promise((resolve, reject) => {
    resolve(`Fazendo login na conta ${login}`)
    })

const buscarDados = () => new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('carregando dados...')
    }, 1500)
})

const mostrarBoasVindas = (login) => new Promise((resolve, reject) => {
    resolve(`Bem vindo ${login}`)
})

async function processoLogin() {
    try {
        const acesso = await login("Matheus");
        const carregamento = await buscarDados();
        const boasVindas = await mostrarBoasVindas("Matheus")
        console.log(acesso)
        console.log(carregamento)
        console.log(boasVindas)
    } catch (error) {
        console.log(error);
    }
}

// processoLogin();


/*
ExercÃ­cio 5 â€“ Simulando requisiÃ§Ã£o com fetch (mock)
Crie uma funÃ§Ã£o buscarPosts() com async/await que simula uma chamada fetch para buscar dados de posts.
Use setTimeout para simular o tempo de resposta da rede (ex: 1.5 segundos).
Depois, exiba os posts em um console.log.
*/
async function buscarPosts() {
    const url = "https://swapi.py4e.com/api/people/3";
    const resposta = await fetch(url);
    const json = await resposta.json();
    console.log(json.name)
}

buscarPosts();
/*
Exercicio bonus
Fazer funÃ§Ãµes com promises que vÃ£o simular o processo de login - carregamento - mensagem de boas vindas.
Criar uma funÃ§Ã£o construtora users com as seguintes informaÃ§Ãµes:
- id
- senha
- email

Crie um array que vai armazenar algumas instÃ¢ncias desse objeto.

Fazer um sistema de validaÃ§Ã£o se o id e senha foram escritos corretamente

-opicional-
Utilize o readline para fazer o input no console.log

*/


// Estrutura (inicio) - promiseChain
const login2 = (login) => new Promise((resolve, reject) => {
    resolve(`Fazendo login na conta ${login}`)
}).then((resutlado) => {

})