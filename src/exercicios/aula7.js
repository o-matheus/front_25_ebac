/* 
üöÄ Quest√£o 1 ‚Äì Criando uma classe b√°sica
Crie uma classe chamada Pessoa que tenha os seguintes atributos:
nome
idade
E um m√©todo chamado apresentar() que retorna a string:
"Ol√°, meu nome √© [nome] e tenho [idade] anos."
Instancie um objeto dessa classe e chame o m√©todo apresentar().
*/
class Pessoa {
    constructor(nome, idade) {
        this.nome = nome;
        this.idade = idade;
    }

    apresentar() {
        console.log(`Ol√°, meu nome √© ${this.nome} e tenho ${this.idade} anos.`)
    }
}

const matheus = new Pessoa("Matheus", 26);
matheus.apresentar();




/* 
üß¨ Quest√£o 2 ‚Äì Heran√ßa
Crie uma classe chamada Funcionario que herda de Pessoa (da quest√£o anterior) e adicione:
Um atributo adicional: cargo
Um m√©todo chamado descricaoCargo() que retorna:
"Trabalho como [cargo]."
Crie uma inst√¢ncia de Funcionario e use os dois m√©todos: apresentar() e descricaoCargo().
*/
class Funcionario extends Pessoa {
    // Quando estamos criando uma classe que pega atributos herdados e queremos adicionar um novo atributo n√≥s temos passar todos os atributos os que foram herdados usamos o super e o novo mantemos a estrutura do this.

    // Tenho que estudar coes√£o, reuso, acoplamento, classe, atributo, m√©todo, os tipos de atributos e m√©todos
    constructor(nome, idade, cargo) {
        super(nome, idade)
        this.cargo = cargo;
    }

    descricaoCargo() {
        console.log(`Trabalho como ${this.cargo}`)
    }
}

const funcionarioMatheus = new Funcionario(matheus.nome, matheus.idade, 'professor');
console.log(funcionarioMatheus);

const pessoa = new Pessoa("Eduardo", 29)
const func = new Funcionario(pessoa.nome, pessoa.idade, "dev")



/* 
üîí Quest√£o 3 ‚Äì Encapsulamento com propriedades privadas
Crie uma classe chamada ContaBancaria com:
um saldo privado #saldo iniciado com 0;

m√©todos p√∫blicos:
depositar(valor) ‚Üí adiciona ao saldo;
sacar(valor) ‚Üí subtrai do saldo, se houver saldo suficiente;
consultarSaldo() ‚Üí retorna o saldo atual.
Teste os m√©todos criando uma conta e fazendo dep√≥sitos e saques.

*/
class ContaBancaria {
    #saldo = 0;

    depositar(valor) {
        this.#saldo += valor;
        console.log(`Voc√™ realizou um deposito de R$ ${valor}, seu saldo √© de: R$ ${this.#saldo}. `)
    }

    sacar(valor) {
        if (this.#saldo >= valor) {
            this.#saldo -= valor;
            console.log(`Voc√™ realizou um saque de R$ ${valor}, seu saldo √© de: R$ ${this.#saldo}. `)
        }

        else {
            console.log('Saldo insuficiente para fazer a opera√ß√£o.')
        }
    }

    consultarSaldo() {
        console.log(`Seu saldo √© de R$ ${this.#saldo}`)
    }
}
/* 
üß† Quest√£o 4 ‚Äì Classe com m√©todos est√°ticos
Crie uma classe Matematica com um m√©todo est√°tico dobro(numero) que retorna o dobro do n√∫mero passado.
Use esse m√©todo diretamente pela classe, sem criar um objeto.
*/
// √â uma fun√ß√£o que √© executada sem utilizar os dados do de uma inst√¢ncia, chama como se fosse uma fun√ß√£o normal, passando o valor. 
class Matematica {
    static dobro(x) {
        return x * 2;
    }
}

console.log(Matematica.dobro(5))

/* 
üß© Quest√£o 5 ‚Äì Polimorfismo com sobrescrita de m√©todo
Crie uma classe Animal com um m√©todo falar() que retorna "O animal fez um som.".
Depois, crie uma classe Cachorro que herda de Animal e sobrescreve o m√©todo falar() para retornar "O cachorro latiu.".
Crie objetos das duas classes e chame o m√©todo falar() para verificar o comportamento diferente.
*/

class Animal {
    falar() {
        console.log("O animal fez um som.")
    }
}

// Para fazer a altera√ß√£o de um met√≥do n√£o precisa usar o super, s√≥ reescrever o m√©todo com as novas informa√ß√µes. (Nesse caso)
class Cachorro extends Animal {
    falar() {
        console.log("O cachorro fez um som.")
    }
}

const cachorro = new Cachorro;
const animal = new Animal;

cachorro.falar();
animal.falar();